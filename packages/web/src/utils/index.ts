import { h } from 'vue';
import { store } from '../store';
import dayjs from 'dayjs';
import { Message, Modal } from '@arco-design/web-vue';
import { remote } from './remote';
import { notify } from './notify';
import { electron } from './node';
import { OCSApi } from '@ocsjs/common/src/api';

const { ipcRenderer } = electron;

export function sleep(timeout: number) {
	return new Promise((resolve) => setTimeout(resolve, timeout));
}

/**
 * Èò≤Êäñ
 * @param fn ÊñπÊ≥ï
 * @param period Èó¥Èöî
 */
export function debounce(fn: Function, period: number) {
	let timer: number | null = null;
	return function () {
		if (timer !== null) {
			clearTimeout(timer);
		}
		timer = setTimeout(fn, period);
	};
}

/**
 * Ê£ÄÊµã json ËØ≠Ê≥ï
 * @param jsonString json Â≠óÁ¨¶‰∏≤
 */
export function jsonLint(jsonString: string) {
	try {
		JSON.parse(jsonString);
	} catch (e) {
		const msg = (e as Error).message;
		const match = msg.match(/Unexpected token(.*)in JSON at position (\d+)/);
		const position = parseInt(match?.[2] || '0');
		let count = 0;
		let line = 0;
		for (const str of jsonString.split('\n')) {
			count += str.length + 1;

			if (count >= position) {
				return {
					token: match?.[1],
					line
				};
			}

			line++;
		}
	}
}

export function date(time: number) {
	return dayjs(time).format('YYYY-MM-DD');
}

export function datetime(time: number) {
	return dayjs(time).format('YYYY-MM-DD hh:mm');
}

/**
 * Ëé∑ÂèñËøúÁ®ãÈÄöÁü•
 * @param readAll ÊòØÂê¶ÈòÖËØªÂÖ®ÈÉ®
 */
export async function fetchRemoteNotify(readAll: boolean) {
	try {
		const infos = await getRemoteInfos();

		let remoteNotify = infos.notify;
		const storeNotify: typeof infos.notify = store.render.notifies;
		/** ÂØªÊâæÊú™ÈòÖËØªÁöÑÈÄöÁü• */
		if (!readAll) {
			remoteNotify = remoteNotify.filter(
				(item) => storeNotify.findIndex((localeItem) => item?.id === localeItem?.id) === -1
			);
		}

		if (remoteNotify.length) {
			Modal.confirm({
				title: () => 'üéâÊúÄÊñ∞ÂÖ¨Âëäüéâ',
				okText: readAll ? 'Á°ÆÂÆö' : 'ÊúïÂ∑≤ÈòÖËØª',
				cancelText: readAll ? 'ÂèñÊ∂à' : '‰∏ãÊ¨°‰∏ÄÂÆö',
				hideCancel: false,
				simple: true,
				width: 600,
				content: () =>
					h(
						'div',
						{
							style: {
								maxHeight: '320px',
								overflow: 'auto'
							}
						},
						remoteNotify.map((item) =>
							h('div', [
								h(
									'div',
									{
										style: {
											marginBottom: '6px',
											fontWeight: 'bold'
										}
									},
									item?.id || 'Êó†Ê†áÈ¢ò'
								),
								h(
									'ul',
									item.content.map((text: string) => h('li', text))
								)
							])
						)
					),
				onOk() {
					if (!readAll) {
						store.render.notifies = [...store.render.notifies].concat(remoteNotify);
					}
				},
				onCancel() {}
			});
		}
	} catch (e) {
		Message.error('ÊúÄÊñ∞ÈÄöÁü•Ëé∑ÂèñÂ§±Ë¥•Ôºö' + e);
	}
}

/**
 * Ëé∑Âèñ infos.json
 */

export async function getRemoteInfos() {
	return await OCSApi.getInfos();
}

/** ‰∏ãËΩΩÊñá‰ª∂Âà∞ÊåáÂÆöË∑ØÂæÑ */
export async function download({
	name,
	dest,
	url
}: {
	/** ÊòæÁ§∫Êñá‰ª∂Âêç */
	name: string;
	/** ‰∏ãËΩΩË∑ØÂæÑ */
	dest: string;
	/** url */
	url: string;
}) {
	const listener = (e: any, channel: string, rate: number, chunkLength: number, totalLength: number) => {
		installListener(name, channel, rate, chunkLength, totalLength);
	};

	// ÁõëÂê¨‰∏ãËΩΩËøõÂ∫¶
	ipcRenderer.on('download', listener);
	try {
		// ‰∏ãËΩΩ
		await remote.methods.call('download', 'download-file-' + name, url, dest);
	} catch (err) {
		// @ts-ignore
		Message.error('‰∏ãËΩΩÈîôËØØ ' + err.message);
	}
	ipcRenderer.removeListener('download', listener);

	return dest;
}

/**
 * ‰∏ãËΩΩÂéãÁº©ÂåÖÊñá‰ª∂ÔºåÂπ∂ËøîÂõûËß£ÂéãËøáÂêéÁöÑÊñá‰ª∂Â§πÁªùÂØπË∑ØÂæÑ
 */
export async function downloadZip({
	name,
	filename,
	folder,
	url
}: {
	/** ÊòæÁ§∫Êñá‰ª∂Âêç */
	name: string;
	/** ÁúüÂÆûÊñá‰ª∂ÂêçÔºå‰∏çË¶ÅÂ∏¶ÂêéÁºÄ */
	filename: string;
	/** Áà∂Êñá‰ª∂Â§πË∑ØÂæÑ */
	folder: string;
	url: string;
}) {
	Message.info('Ê≠£Âú®‰∏ãËΩΩ ' + name);

	const zip = await remote.path.call('join', folder, `${filename}.zip`);
	const unzip = await remote.path.call('join', folder, filename);
	//  ‰∏ãËΩΩ
	await download({ name: name, dest: zip, url });

	notify('Êñá‰ª∂Ëß£Âéã', `${name} Ëß£Âéã‰∏≠...`, 'download-file-' + name, {
		type: 'info',
		duration: 0
	});

	// Ëß£ÂéãÊãìÂ±ï
	await remote.methods.call('unzip', zip, unzip);
	// Âà†Èô§ÂéãÁº©ÂåÖ
	await remote.fs.call('unlinkSync', zip);

	notify('Êñá‰ª∂‰∏ãËΩΩ', `${name} ‰∏ãËΩΩÂÆåÊàêÔºÅ`, 'download-file-' + name, {
		type: 'success',
		duration: 3000
	});

	return unzip;
}

function installListener(name: string, channel: string, rate: number, chunkLength: number, totalLength: number) {
	if (channel === 'download-file-' + name) {
		if (rate === 100) {
			return notify(
				'Êñá‰ª∂‰∏ãËΩΩ',
				`${name} ‰∏ãËΩΩÂÆåÊàê: ${(totalLength / 1024 / 1024).toFixed(2)}MB`,
				'download-file-' + name,
				{
					type: 'success',
					duration: 0
				}
			);
		} else {
			return notify(
				'Êñá‰ª∂‰∏ãËΩΩ',
				`${name} ‰∏ãËΩΩ‰∏≠: ${(chunkLength / 1024 / 1024).toFixed(2)}MB/${(totalLength / 1024 / 1024).toFixed(2)}MB`,
				'download-file-' + name,
				{
					type: 'info',
					duration: 0
				}
			);
		}
	}
}

/** ÊòæÁ§∫ÂÖ≥‰∫éËΩØ‰ª∂ËØ¥Êòé */
export async function about() {
	store.render.state.first = false;
	const version = await remote.app.call('getVersion');
	Modal.info({
		title: 'ÂÖ≥‰∫éËΩØ‰ª∂',
		closable: true,
		simple: false,
		maskClosable: true,
		content: () =>
			h('div', [
				h('p', {
					innerHTML:
						'&nbsp;&nbsp;OCSÊ°åÈù¢ÁâàËΩØ‰ª∂ÈÄöËøáÊìçÊéßÊµèËßàÂô®ÂèØ‰ª•ËøõË°åÊµèËßàÂô®Â§öÂºÄÔºàÊØè‰∏™ÊµèËßàÂô®Êï∞ÊçÆ‰∏çÂÖ±‰∫´ÔºåÂèØ‰ª•ÂÆûÁé∞ÊØè‰∏™ÁΩëÁ´ôÁôªÂΩï‰∏çÂêåÁöÑË¥¶Âè∑ÔºâÔºåÂπ∂‰∏îÊúâÂº∫Â§ßÁöÑÊµèËßàÂô®ÁÆ°ÁêÜÂäüËÉΩ‰ª•ÂèäÊµèËßàÂô®Â±èÂπïÁõëÊéßÂäüËÉΩ„ÄÇ'
				}),
				h('p', {
					innerHTML:
						'&nbsp;&nbsp;ÈÄöËøáÂÆâË£ÖÁî®Êà∑ËÑöÊú¨ÁÆ°ÁêÜÂô®Ôºà‰æãÂ¶ÇËÑöÊú¨Áå´ÔºåÊ≤πÁå¥ÔºâÔºåÂπ∂ÂÆâË£ÖÊã•ÊúâÂêÑÁßçÂäüËÉΩÁöÑÁî®Êà∑ËÑöÊú¨ÔºåÂèØ‰ª•ÊãìÂ±ïÊõ¥Â§öÊµèËßàÂô®ÂäüËÉΩ„ÄÇ'
				}),

				h('ul', { style: { paddingLeft: '12px' } }, [
					h('li', 'ËΩØ‰ª∂ÁâàÊú¨ : ' + version),
					h('li', [
						h('span', 'ËΩØ‰ª∂ÂÆòÁΩë : '),
						h(
							'a',
							{
								href: '#',
								onClick: () => electron.shell.openExternal('https://docs.ocsjs.com/')
							},
							'https://docs.ocsjs.com'
						)
					]),
					h('li', [
						h('span', 'ËΩØ‰ª∂‰∏ãËΩΩ : '),
						h(
							'a',
							{
								href: '#',
								onClick: () => electron.shell.openExternal('https://docs.ocsjs.com/docs/ËµÑÊ∫ê‰∏ãËΩΩ/app-downloads')
							},
							'https://docs.ocsjs.com/docs/ËµÑÊ∫ê‰∏ãËΩΩ/app-downloads'
						)
					])
				])
			])
	});
}
